import { DataTypes } from 'sequelize';
import { sequelize } from '../config/database.js';
import { all } from '../routes/api/item.router.js';
import { defaults } from 'pg';


const User = sequelize.define("User", {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
    allowNull: false,
    unique: true,
    validate: {
      isInt: true,
      min: 1,
    },
    required: true
  },

  code: {
    type: DataTypes.STRING(30),
    allowNull: false,
    unique: true,
    required: true,
    validate: {
      len: [3, 30],
      isAlphanumeric: true,
    }
    //comment: "Autogenerated Code. Ej: D-FE34-03-1-2025"
  },

  name: {
    type: DataTypes.STRING(100),
    allowNull: false,
    validate: {
      validators: {
        function: function (value) {
          const nameRegex = /^[a-zA-Z]+$/;
          return nameRegex.test(value);
        },
        msg: "Name must contain only letters"
      },
      isAlpha: {
        len: [3, 50],
        args: true,
        msg: "Name must have at least 3 characters",
      }
    },
    trim: true,
    required: true
  },


  last_name: {
    type: DataTypes.STRING(100),
    allowNull: false,
    validate: {
      validators: {
        function: function (value) {
          const nameRegex = /^[a-zA-Z]+$/;
          return nameRegex.test(value);
        },
        msg: "Name must contain only letters"
      },
      isAlpha: {
        len: [3, 50],
        args: true,
        msg: "Name must have at least 3 characters",
      }
    },
    trim: true,
    required: true
  },


  email: {
    type: DataTypes.STRING(150),
    allowNull: false,
    unique: true,
    required: true,
    isLowercase: true,
    validate: {
      validators: {
        function: (value) => {
          const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
          return emailRegex.test(value);
        },
        msg: "Email must be valid format"
      },
      isEmail: {
        length: [10, 100],
        args: true,
        msg: "Email length must be between 10 and 100 characters",
      },
    },
    trim: true,
  },

  birth_date: {
    type: DataTypes.DATEONLY,
    allowNull: false,
    required: true,
    isDate: {
      args: true,
      msg: "Birth date must be a valid date",
    },
    validate: {
      validators: {
        function: (value) => {
          const date = new Date(value);
          return date <= new Date();
        },
        msg: "Birth date must be a valid date and not in the future"
      },
      isBefore: {
        args: ["1900-01-01"],
        msg: "You're too old to be alive",
      }
    }
  },

  country: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    references: {
      model: "country_codes",
      key: "id"
    }
  },

  phone: {
    type: DataTypes.STRING(20),
    allowNull: false,
    unique: true,
    required: true,
    validate: {
      validators: {
        function: (value) => {
          const phoneRegex = /^[0-9]+$/;
          return phoneRegex.test(value);
        },
        msg: "Phone number must contain only numbers"
      },
      isNumeric: {
        len: [6, 10],
        args: true,
        msg: "Must be a valid phone number between 6 and 10 digits",
      }
    },
    trim: true,
  },

  weight: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    validate: {
      validators: {
        function: (value) => {
          const weightRegex = /^[0-9]+$/;
          return weightRegex.test(value);
        },
        msg: "Weight must contain only numbers"
      },
      isNumeric: {
        len: [20, 250],
        args: true,
        msg: "Weight must be between 20 and 250 kg",
      },
    },
  },

  height: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    validate: {
      validators: {
        function: (value) => {
          const heightRegex = /^[0-9]+$/;
          return heightRegex.test(value);
        },
        msg: "Height must contain only numbers"
      },
      isNumeric: {
        len: [100, 250],
        args: true,
        msg: "Height must be between 100 and 250 cm",
      },
    }
  },

  gender_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    references: {
      model: "event_categories",
      key: "id",
    },
  },

  size_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: "event_categories",
      key: "id",
    },
  },

  role_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    defaultValue: 9, // ID of 'User' in event_categories
    references: {
      model: "event_categories",
      key: "id",
    },
  },

  username: {
    type: DataTypes.STRING(50),
    allowNull: false,
    unique: true,
    required: true,
    validate: {
      function: (value) => {
        const usernameRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{4,10}$/;
        return usernameRegex.test(value);
      },
      msg: "Username must contain at least 4 characters, one uppercase letter, one lowercase letter, and one number"
    },
    isAlphanumeric: true,
    trim: true,
  },

  password: {
    type: DataTypes.STRING(255),
    allowNull: false,
    required: true,
    isAlphanumeric: true,
    validate: {
      validators: {
        function: (value) => {
          const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,50}$/;
          return passwordRegex.test(value);
        },
        msg: "Password must contain at least 8 characters, one uppercase letter, one lowercase letter, and one number"
      }
    }
  },

  diver_type_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    defaultValue: 11, // ID of 'Diver' in event_categories
    references: {
      model: "event_categories",
      key: "id",
    },
  },

  certifying_entity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    references: {
      model: "certifying_entities",
      key: "id",
    },
  },

  diving_level: {
    type: DataTypes.INTEGER,
    allowNull: false,
    required: true,
    defaultValue: 0, // ID of 'Beginner' in diver_levels
    references: {
      model: "diver_levels",
      key: "id",
    },
  },

  instructor_level: {
    type: DataTypes.INTEGER,
    allowNull: true,
    required: true,
    defaultValue: 0, // ID of 'Beginner' in instructor_levels
    references: {
      model: "instructor_levels",
      key: "id",
    },
  },

  federation_license: {
    type: DataTypes.STRING(20),
    allowNull: false,
    unique: true,
    required: true,
    default: "SYSTEM-00",
  },

  insurance: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
    required: true,
    allowNull: false,
  },

  insurance_policy: {
    type: DataTypes.STRING(50),
    allowNull: true,
  },

  registration_date: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW,
    required: true,
  },

  is_active: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true,
  },

  total_dives: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0,
  },

  credits: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0,
  }
},
  tableName, "users",
  timestamps, false,
);

module.exports = User;
export default User;
export { User };